def plot_rival_radar(df, player_dict):
     
    # groupy by player/opponent pairs and calculater proportion of points won
    df = (df.loc[df.result != '-']
       .groupby(['name', 'name_o'])
       .apply(lambda x: x['h2h_points'].sum() / (len(x) * 3))
       .reset_index(name='value'))
    
    players = player_dict.keys()
    n_players = len(players)

    plt.style.use('default')
    fig = plt.figure(figsize=(8,6))
    

    for i, player in zip(range(n_players), players):
        # get points
        points = df.loc[df.name == player, 'value'].values
        points = np.concatenate((points, [points[0]]))
        
        # get list of opponents for axis label
        opponents = df.loc[df.name == player, 'name_o'].values
        
        # get angles for polar co-ordinates projection
        angles = np.linspace(0, 2*np.pi, len(opponents), endpoint=False)
        angles = np.concatenate((angles,[angles[0]]))

        # create subplot
        ax = fig.add_subplot(2, 3, i+1, polar=True)
        ax.plot(angles, points, 'o-', linewidth=2, markersize=3, color=player_dict[player])
        ax.fill(angles, points, alpha=0.25, color=player_dict[player])
        
        # format subplot
        ax.set_thetagrids(angles * 180/np.pi, opponents, size=7)
        ax.set_theta_zero_location("S")
        ax.set_ylim([0, 1])
        ax.set_yticks(np.linspace(0, 1, 5))
        ax.set_yticklabels([])
        ax.grid(True, color='grey')
        ax.set_title(player)

    fig.tight_layout()